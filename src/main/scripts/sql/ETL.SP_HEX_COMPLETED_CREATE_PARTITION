---------------------------------------------------------------------------------------------------------------------------------
--   Date			Author			Description
--   ---------- 	----------		---------------------------------------------------------------------------------------------
--   2013-12-17		nsucheendran	This stored procedure creates new partition for the table - RPT_HCOM_HEX_AGG_SEGMENTATION_COMPLETED
--------------------------------------------------------------------------------------------------------------------------------
--#SET TERMINATOR @
call dbadm.sp_drop_procedure('ETL','SP_HEX_COMPLETED_CREATE_PARTITION')
@
call sysproc.set_routine_opts('reopt always')
@
CREATE PROCEDURE etl.SP_HEX_COMPLETED_CREATE_PARTITION 
dynamic result sets 1
language sql
begin

---------------------------------------------------------------------
-- Declarations
---------------------------------------------------------------------

-- Standard variables
   declare stmt                    varchar(2048)   default '';
   declare v_alter                 varchar(2048)   default '';
   declare v_entity                varchar(50)     default 'SP_HEX_COMPLETED_CREATE_PARTITION';
   declare nextid                  integer         default 0;
   declare sqlstate                char(5)         default '00000';
   declare rcount                  integer;
   declare load_tag                integer default 0;
   declare v_parameters            varchar(2000);
   declare v_PartitionName         VARCHAR(100);
   declare v_LowValue              VARCHAR(100);
   declare v_PartitionName_int     integer;   
   declare v_schemaname            varchar(50)     default 'DM';
   declare v_tablename             varchar(50)     default 'RPT_HEXDM_AGG_SEGMENT_COMP';
   declare LeaveLoop               smallint;
   declare NotFound condition for sqlstate '02000';
   
   declare C1 cursor for
      select distinct EXPERIMENT_CODE from DM.HEX_REPORTING_REQUIREMENTS 
       where 1=1
        and EXPERIMENT_CODE  not in (select  substr(lowvalue,2,length(lowvalue)-2) from SYSCAT.DATAPARTITIONS where tabschema = v_schemaname  and tabname = v_tablename) 
        and STATUS = 'Completed'
      with ur;
 
      
   declare continue handler for NotFound set LeaveLoop = 1;

   declare exit handler for sqlexception
   begin
      declare v_message varchar(1024);
      declare v_nextid integer;
      declare v_sqlstate char(5);

      get diagnostics exception 1 v_message = message_text;
      set v_sqlstate=SQLSTATE;
      rollback work;

      select coalesce(max(error_id)+1,0) into v_nextid from etl.etl_sproc_error with rr use and keep exclusive locks;
      insert into etl.etl_sproc_error values (v_nextid, current timestamp, v_entity, Stmt, v_message);
      commit;

      call etl.sp_trace
      (
         entity         => v_entity,
         step_info      => Stmt || ' failure',
         parameter_info => v_parameters,
         r_count        => rcount,
         etl_load_tag   => null,
         error_state_code => v_sqlstate,
         error_mesg_info => v_message
      );

      set v_message = 'Procedure failed. Check etl.etl_sproc_error. ERROR_ID='||char(v_nextid);
      signal sqlstate v_sqlstate set message_text = v_message;
      return 8;
   end;


   set v_parameters = 'Create Partition';


   call etl.sp_trace
   (
      entity         => v_entity,
      step_info      => 'procedure start',
      parameter_info => v_parameters,
      r_count        => null,
      etl_load_tag   => null
   );

   commit;
   
  CreatePARTITIONRANGE:begin  	
 	
 	--Get the v_PartitionName_int
  select
     max(int(replace(datapartitionname,'P','')))
  into
     v_PartitionName_int
  from
     SYSCAT.DATAPARTITIONS
  where
     tabschema=v_schemaname
     and tabname=v_tablename
  with ur; 
  
  set v_PartitionName_int = coalesce(v_PartitionName_int,0);
  
   call etl.sp_trace
     (
        entity         => v_entity,
        step_info      => 'Max Partition value ' ,
        parameter_info =>  trim(char(v_PartitionName_int)),
        r_count        => null,
        etl_load_tag   => null
     );
	 
	set LeaveLoop = 0;
	open C1;
	FetchLoopC1:
	
	loop
	   fetch c1 into v_LowValue;
	   
	 call etl.sp_trace
     (
        entity         => v_entity,
        step_info      => 'Check - LeaveLoop Count - LowValue - Last Partition Number' ,
        parameter_info => trim(char(LeaveLoop)) || '-' || trim(char(v_LowValue)) || '-' || trim(char(v_PartitionName_int)),
        r_count        => null,
        etl_load_tag   => null
     );
	 
	   if LeaveLoop <> 0 then
         leave FetchLoopC1;
     end if; 
     
     set v_PartitionName_int=v_PartitionName_int+1;
     set v_PartitionName='P'||char(v_PartitionName_int);
     
	  call etl.sp_trace
     (
        entity         => v_entity,
        step_info      => 'New Partition Number & Name',
        parameter_info => trim(char(v_PartitionName_int)) || '-' || trim(char(v_PartitionName)) ,
        r_count        => null,
        etl_load_tag   => null
     );
	 
     -- ALTER Statement to add new partitions
     SET v_alter = 'ALTER TABLE ' 
             || trim(v_schemaname)
             || '.' 
             || trim(v_tablename) 
             || ' ADD PARTITION ' 
             || v_PartitionName 
             || ' STARTING FROM ''' 
             || v_LowValue 
             || ''' ENDING AT ''' 
             || v_LowValue 
             || ''' INCLUSIVE'; 
     
	 call etl.sp_trace
     (
        entity         => v_entity,
        step_info      => 'Alter statement',
        parameter_info => char(v_alter),
        r_count        => null,
        etl_load_tag   => null
     );
	 
     PREPARE s1 FROM v_alter;
     EXECUTE s1;
     
     set Stmt = 'create PARTITION RANGE for table '||v_schemaname||'.'||v_tablename||' and partition value is '||v_LowValue;
	 call etl.sp_trace
     (
        entity         => v_entity,
        step_info      => 'Partition Created Successfully',
        parameter_info => trim(char(v_LowValue)),
        r_count        => null,
        etl_load_tag   => null
     );  
	  
	end loop FetchLoopC1;
	close C1;  
	end;
   COMMIT;  
    runstats: begin
    
	call dbadm.sp_runstats_v2('DM','RPT_HEXDM_AGG_SEGMENT_COMP');
    call etl.sp_trace
	(
        entity=>v_entity,
        parameter_info=>null,
        step_info=>'runstats RPT_HEXDM_AGG_SEGMENT_COMP',
        etl_load_tag=>null
    );
   
   end runstats;

   call etl.sp_trace
   (
       entity=>v_entity,
       parameter_info=>null,
       step_info=>'Procedure finished successfully.',
       etl_load_tag=>null
   );

   commit;
   
end
@
grant execute on procedure etl.SP_HEX_COMPLETED_CREATE_PARTITION to role oretlrw
@
